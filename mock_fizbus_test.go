// Automatically generated by MockGen. DO NOT EDIT!
// Source: /development/go-workspace/src/github.com/tkashem/fizbus/fizbus.go

package fizbus

import (
	gomock "github.com/golang/mock/gomock"
	context "golang.org/x/net/context"
)

// Mock of Bus interface
type MockBus struct {
	ctrl     *gomock.Controller
	recorder *_MockBusRecorder
}

// Recorder for MockBus (not exported)
type _MockBusRecorder struct {
	mock *MockBus
}

func NewMockBus(ctrl *gomock.Controller) *MockBus {
	mock := &MockBus{ctrl: ctrl}
	mock.recorder = &_MockBusRecorder{mock}
	return mock
}

func (_m *MockBus) EXPECT() *_MockBusRecorder {
	return _m.recorder
}

func (_m *MockBus) Bind(_param0 string, _param1 Handler) {
	_m.ctrl.Call(_m, "Bind", _param0, _param1)
}

func (_mr *_MockBusRecorder) Bind(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Bind", arg0, arg1)
}

func (_m *MockBus) NewSender(_param0 string) Sender {
	ret := _m.ctrl.Call(_m, "NewSender", _param0)
	ret0, _ := ret[0].(Sender)
	return ret0
}

func (_mr *_MockBusRecorder) NewSender(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "NewSender", arg0)
}

func (_m *MockBus) Start(_param0 context.Context, _param1 *Configuration) (Done, error) {
	ret := _m.ctrl.Call(_m, "Start", _param0, _param1)
	ret0, _ := ret[0].(Done)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockBusRecorder) Start(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Start", arg0, arg1)
}

// Mock of Handler interface
type MockHandler struct {
	ctrl     *gomock.Controller
	recorder *_MockHandlerRecorder
}

// Recorder for MockHandler (not exported)
type _MockHandlerRecorder struct {
	mock *MockHandler
}

func NewMockHandler(ctrl *gomock.Controller) *MockHandler {
	mock := &MockHandler{ctrl: ctrl}
	mock.recorder = &_MockHandlerRecorder{mock}
	return mock
}

func (_m *MockHandler) EXPECT() *_MockHandlerRecorder {
	return _m.recorder
}

func (_m *MockHandler) Handle(_param0 context.Context, _param1 Message) Message {
	ret := _m.ctrl.Call(_m, "Handle", _param0, _param1)
	ret0, _ := ret[0].(Message)
	return ret0
}

func (_mr *_MockHandlerRecorder) Handle(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Handle", arg0, arg1)
}

// Mock of Sender interface
type MockSender struct {
	ctrl     *gomock.Controller
	recorder *_MockSenderRecorder
}

// Recorder for MockSender (not exported)
type _MockSenderRecorder struct {
	mock *MockSender
}

func NewMockSender(ctrl *gomock.Controller) *MockSender {
	mock := &MockSender{ctrl: ctrl}
	mock.recorder = &_MockSenderRecorder{mock}
	return mock
}

func (_m *MockSender) EXPECT() *_MockSenderRecorder {
	return _m.recorder
}

func (_m *MockSender) Send(_param0 context.Context, _param1 string, _param2 Message) Receiver {
	ret := _m.ctrl.Call(_m, "Send", _param0, _param1, _param2)
	ret0, _ := ret[0].(Receiver)
	return ret0
}

func (_mr *_MockSenderRecorder) Send(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Send", arg0, arg1, arg2)
}

// Mock of Receiver interface
type MockReceiver struct {
	ctrl     *gomock.Controller
	recorder *_MockReceiverRecorder
}

// Recorder for MockReceiver (not exported)
type _MockReceiverRecorder struct {
	mock *MockReceiver
}

func NewMockReceiver(ctrl *gomock.Controller) *MockReceiver {
	mock := &MockReceiver{ctrl: ctrl}
	mock.recorder = &_MockReceiverRecorder{mock}
	return mock
}

func (_m *MockReceiver) EXPECT() *_MockReceiverRecorder {
	return _m.recorder
}

func (_m *MockReceiver) Receive() (*Message, error) {
	ret := _m.ctrl.Call(_m, "Receive")
	ret0, _ := ret[0].(*Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockReceiverRecorder) Receive() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Receive")
}
