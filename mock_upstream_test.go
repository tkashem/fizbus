// Automatically generated by MockGen. DO NOT EDIT!
// Source: github.com/tkashem/fizbus/upstream (interfaces: Dialer,Connection,Channel,Table)

package fizbus

import (
	gomock "github.com/golang/mock/gomock"
	amqp "github.com/streadway/amqp"
	upstream "github.com/tkashem/fizbus/upstream"
)

// Mock of Dialer interface
type MockDialer struct {
	ctrl     *gomock.Controller
	recorder *_MockDialerRecorder
}

// Recorder for MockDialer (not exported)
type _MockDialerRecorder struct {
	mock *MockDialer
}

func NewMockDialer(ctrl *gomock.Controller) *MockDialer {
	mock := &MockDialer{ctrl: ctrl}
	mock.recorder = &_MockDialerRecorder{mock}
	return mock
}

func (_m *MockDialer) EXPECT() *_MockDialerRecorder {
	return _m.recorder
}

func (_m *MockDialer) Dial() (upstream.Connection, error) {
	ret := _m.ctrl.Call(_m, "Dial")
	ret0, _ := ret[0].(upstream.Connection)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockDialerRecorder) Dial() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Dial")
}

// Mock of Connection interface
type MockConnection struct {
	ctrl     *gomock.Controller
	recorder *_MockConnectionRecorder
}

// Recorder for MockConnection (not exported)
type _MockConnectionRecorder struct {
	mock *MockConnection
}

func NewMockConnection(ctrl *gomock.Controller) *MockConnection {
	mock := &MockConnection{ctrl: ctrl}
	mock.recorder = &_MockConnectionRecorder{mock}
	return mock
}

func (_m *MockConnection) EXPECT() *_MockConnectionRecorder {
	return _m.recorder
}

func (_m *MockConnection) Channel() (upstream.Channel, error) {
	ret := _m.ctrl.Call(_m, "Channel")
	ret0, _ := ret[0].(upstream.Channel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockConnectionRecorder) Channel() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Channel")
}

func (_m *MockConnection) Close() {
	_m.ctrl.Call(_m, "Close")
}

func (_mr *_MockConnectionRecorder) Close() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Close")
}

func (_m *MockConnection) Notify() <-chan *amqp.Error {
	ret := _m.ctrl.Call(_m, "Notify")
	ret0, _ := ret[0].(<-chan *amqp.Error)
	return ret0
}

func (_mr *_MockConnectionRecorder) Notify() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Notify")
}

// Mock of Channel interface
type MockChannel struct {
	ctrl     *gomock.Controller
	recorder *_MockChannelRecorder
}

// Recorder for MockChannel (not exported)
type _MockChannelRecorder struct {
	mock *MockChannel
}

func NewMockChannel(ctrl *gomock.Controller) *MockChannel {
	mock := &MockChannel{ctrl: ctrl}
	mock.recorder = &_MockChannelRecorder{mock}
	return mock
}

func (_m *MockChannel) EXPECT() *_MockChannelRecorder {
	return _m.recorder
}

func (_m *MockChannel) Consume(_param0 string, _param1 bool) (<-chan amqp.Delivery, error) {
	ret := _m.ctrl.Call(_m, "Consume", _param0, _param1)
	ret0, _ := ret[0].(<-chan amqp.Delivery)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockChannelRecorder) Consume(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Consume", arg0, arg1)
}

func (_m *MockChannel) Prefetch(_param0 int) error {
	ret := _m.ctrl.Call(_m, "Prefetch", _param0)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockChannelRecorder) Prefetch(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Prefetch", arg0)
}

func (_m *MockChannel) Publish(_param0 *upstream.Request) error {
	ret := _m.ctrl.Call(_m, "Publish", _param0)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockChannelRecorder) Publish(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Publish", arg0)
}

// Mock of Table interface
type MockTable struct {
	ctrl     *gomock.Controller
	recorder *_MockTableRecorder
}

// Recorder for MockTable (not exported)
type _MockTableRecorder struct {
	mock *MockTable
}

func NewMockTable(ctrl *gomock.Controller) *MockTable {
	mock := &MockTable{ctrl: ctrl}
	mock.recorder = &_MockTableRecorder{mock}
	return mock
}

func (_m *MockTable) EXPECT() *_MockTableRecorder {
	return _m.recorder
}

func (_m *MockTable) From(_param0 amqp.Table) map[string]string {
	ret := _m.ctrl.Call(_m, "From", _param0)
	ret0, _ := ret[0].(map[string]string)
	return ret0
}

func (_mr *_MockTableRecorder) From(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "From", arg0)
}

func (_m *MockTable) To(_param0 map[string]string) amqp.Table {
	ret := _m.ctrl.Call(_m, "To", _param0)
	ret0, _ := ret[0].(amqp.Table)
	return ret0
}

func (_mr *_MockTableRecorder) To(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "To", arg0)
}
